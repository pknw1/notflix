{"version":3,"sources":["webpack:///./src/components/commons/SpaceAnim/Pointer.js","webpack:///./src/components/commons/SpaceAnim/helpers.js","webpack:///./src/components/commons/SpaceAnim/Material.js","webpack:///./src/components/commons/SpaceAnim/Program.js","webpack:///./src/components/commons/SpaceAnim/FluidSimulation.js","webpack:///./src/utils/isMobile.js","webpack:///./src/components/commons/SpaceAnim/shaders.js"],"names":["Pointer","this","id","texcoordX","texcoordY","prevTexcoordX","prevTexcoordY","deltaX","deltaY","down","moved","color","getUniforms","program","gl","uniforms","uniformCount","getProgramParameter","ACTIVE_UNIFORMS","i","uniformName","getActiveUniform","name","getUniformLocation","createProgram","vertexShader","fragmentShader","attachShader","linkProgram","LINK_STATUS","console","trace","getProgramInfoLog","compileShader","type","source","keywords","keywordsString","forEach","keyword","addKeywords","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","getSupportedFormat","internalFormat","format","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","R16F","RG16F","RG","RGBA16F","RGBA","scaleByPixelRatio","input","pixelRatio","window","devicePixelRatio","Math","floor","getRandomValue","min","max","random","hashCode","s","length","hash","charCodeAt","Material","fragmentShaderSource","programs","activeProgram","setKeywords","FRAGMENT_SHADER","bind","useProgram","Program","FluidSimulation","canvas","config","onMouseMove","e","posX","offsetX","posY","offsetY","pointer","pointers","find","p","updatePointerMoveData","onResize","resizeCanvas","initFramebuffers","halfFloat","supportLinearFiltering","params","alpha","depth","stencil","antialias","preserveDrawingBuffer","getContext","isWebGL2","getExtension","clearColor","formatRGBA","formatRG","formatR","halfFloatTexType","HALF_FLOAT","HALF_FLOAT_OES","RED","ext","getWebGLContext","el","paused","splatStack","init","bloom","push","test","navigator","userAgent","DYE_RESOLUTION","SHADING","BLOOM","SUNRAYS","dye","velocity","divergence","curl","pressure","sunrays","sunraysTemp","bloomFramebuffers","colorUpdateTimer","noiseUpdateTimer","lastUpdate","delta","ditheringTexture","url","LINEAR","REPEAT","RGB","UNSIGNED_BYTE","Uint8Array","obj","width","height","attach","activeTexture","TEXTURE0","image","Image","onload","src","createTextureAsync","blurVertexShader","VERTEX_SHADER","baseVertexShader","colorShader","copyShader","blurShader","clearShader","bloomPrefilterShader","bloomBlurShader","bloomFinalShader","sunraysMaskShader","sunraysShader","splatShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","blurProgram","copyProgram","clearProgram","colorProgram","bloomPrefilterProgram","bloomBlurProgram","bloomFinalProgram","sunraysMaskProgram","sunraysProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradienSubtractProgram","displayMaterial","displayKeywords","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","target","clear","viewport","drawingBufferWidth","drawingBufferHeight","COLOR_BUFFER_BIT","drawElements","TRIANGLES","UNSIGNED_SHORT","initBloomFramebuffers","res","getResolution","BLOOM_RESOLUTION","texType","rgba","filtering","createFBO","BLOOM_ITERATIONS","initSunraysFramebuffers","SUNRAYS_RESOLUTION","r","w","h","param","texelSizeX","texelSizeY","createDoubleFBO","fbo1","fbo2","value","swap","temp","resizeDoubleFBO","read","newFBO","uniform1i","uTexture","resizeFBO","write","calcDeltaTime","timestamp","updateColors","dt","COLOR_UPDATE_SPEED","generateColor","applyInputs","splatPointer","step","disable","BLEND","uniform2f","texelSize","uVelocity","uCurl","uniform1f","CURL","PRESSURE","uDivergence","PRESSURE_ITERATIONS","uPressure","dyeTexelSize","velocityId","uSource","dissipation","VELOCITY_DISSIPATION","DENSITY_DISSIPATION","render","applyBloom","applySunrays","blur","TRANSPARENT","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","drawColor","BACK_COLOR","g","b","a","drawDisplay","uniform4f","uBloom","uDithering","scale","getTextureScale","ditherScale","x","y","uSunrays","destination","last","knee","BLOOM_THRESHOLD","BLOOM_SOFT_KNEE","curve0","curve1","curve2","uniform3f","curve","threshold","dest","baseTex","intensity","BLOOM_INTENSITY","mask","weight","SUNRAYS_WEIGHT","iterations","dx","SPLAT_FORCE","dy","splat","radius","SPLAT_RADIUS","uTarget","aspectRatio","point","correctRadius","walker","index","sin","requestAnimationFrame","update","inputListenersTimeout","setTimeout","addEventListener","resolution","round","simRes","SIM_RESOLUTION","dyeRes","rg","clientWidth","clientHeight","cos","easing","pow","c","v","f","q","t","HSVtoRGB","updatePointerDownData","updatePointerUpData","newDeltaX","correctDeltaX","newDeltaY","correctDeltaY","abs","pause","play","dismount","removeEventListener","clearTimeout"],"mappings":"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","file":"49-864fd06d92ea259136b1.js","sourcesContent":["export default function Pointer() {\n  this.id = -1;\n  this.texcoordX = 0;\n  this.texcoordY = 0;\n  this.prevTexcoordX = 0;\n  this.prevTexcoordY = 0;\n  this.deltaX = 0;\n  this.deltaY = 0;\n  this.down = false;\n  this.moved = false;\n  this.color = [30, 0, 300];\n}\n","export function getUniforms(program, gl) {\n  let uniforms = [];\n  let uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  for (let i = 0; i < uniformCount; i++) {\n    let uniformName = gl.getActiveUniform(program, i).name;\n    uniforms[uniformName] = gl.getUniformLocation(program, uniformName);\n  }\n  return uniforms;\n}\n\nexport function createProgram(vertexShader, fragmentShader, gl) {\n  let program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    console.trace(gl.getProgramInfoLog(program));\n\n  return program;\n}\n\nfunction addKeywords(source, keywords) {\n  if (keywords == null) return source;\n  let keywordsString = \"\";\n  keywords.forEach((keyword) => {\n    keywordsString += \"#define \" + keyword + \"\\n\";\n  });\n  return keywordsString + source;\n}\n\nexport function compileShader(type, source, gl, keywords) {\n  source = addKeywords(source, keywords);\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    console.trace(gl.getShaderInfoLog(shader));\n\n  return shader;\n}\n\nexport function HSVtoRGB(h, s, v) {\n  let r, g, b, i, f, p, q, t;\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n    default:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return {\n    r,\n    g,\n    b,\n  };\n}\n\nexport function normalizeColor(input) {\n  let output = {\n    r: input.r / 255,\n    g: input.g / 255,\n    b: input.b / 255,\n    a: input.a,\n  };\n  return output;\n}\n\nexport function wrap(value, min, max) {\n  let range = max - min;\n  if (range === 0) return min;\n  return ((value - min) % range) + min;\n}\n\nexport function getWebGLContext(canvas) {\n  const params = {\n    alpha: true,\n    depth: false,\n    stencil: false,\n    antialias: false,\n    preserveDrawingBuffer: false,\n  };\n\n  let gl = canvas.getContext(\"webgl2\", params);\n  const isWebGL2 = !!gl;\n  if (!isWebGL2)\n    gl =\n      canvas.getContext(\"webgl\", params) ||\n      canvas.getContext(\"experimental-webgl\", params);\n\n  let halfFloat;\n  let supportLinearFiltering;\n  if (isWebGL2) {\n    gl.getExtension(\"EXT_color_buffer_float\");\n    supportLinearFiltering = gl.getExtension(\"OES_texture_float_linear\");\n  } else {\n    halfFloat = gl.getExtension(\"OES_texture_half_float\");\n    supportLinearFiltering = gl.getExtension(\"OES_texture_half_float_linear\");\n  }\n\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n\n  const halfFloatTexType = isWebGL2 ? gl.HALF_FLOAT : halfFloat.HALF_FLOAT_OES;\n  let formatRGBA;\n  let formatRG;\n  let formatR;\n\n  if (isWebGL2) {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n  } else {\n    formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n  }\n\n  return {\n    gl,\n    ext: {\n      formatRGBA,\n      formatRG,\n      formatR,\n      halfFloatTexType,\n      supportLinearFiltering,\n    },\n  };\n}\n\nexport function getSupportedFormat(gl, internalFormat, format, type) {\n  if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n    switch (internalFormat) {\n      case gl.R16F:\n        return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n      case gl.RG16F:\n        return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n      default:\n        return null;\n    }\n  }\n\n  return {\n    internalFormat,\n    format,\n  };\n}\n\nexport function supportRenderTextureFormat(gl, internalFormat, format, type) {\n  let texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\n\n  let fbo = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n  gl.framebufferTexture2D(\n    gl.FRAMEBUFFER,\n    gl.COLOR_ATTACHMENT0,\n    gl.TEXTURE_2D,\n    texture,\n    0\n  );\n\n  let status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  return status === gl.FRAMEBUFFER_COMPLETE;\n}\n\nexport function scaleByPixelRatio(input) {\n  let pixelRatio = window.devicePixelRatio || 1;\n  return Math.floor(input * pixelRatio);\n}\n\nexport function createTextureAsync(url, gl) {\n  let texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n  gl.texImage2D(\n    gl.TEXTURE_2D,\n    0,\n    gl.RGB,\n    1,\n    1,\n    0,\n    gl.RGB,\n    gl.UNSIGNED_BYTE,\n    new Uint8Array([255, 255, 255])\n  );\n\n  let obj = {\n    texture,\n    width: 1,\n    height: 1,\n    attach(id) {\n      gl.activeTexture(gl.TEXTURE0 + id);\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      return id;\n    },\n  };\n\n  let image = new Image();\n  image.onload = () => {\n    obj.width = image.width;\n    obj.height = image.height;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\n  };\n  image.src = url;\n\n  return obj;\n}\n\nexport function easeInOutQuart(x) {\n  return x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2;\n}\n\nexport function getRandomValue(min, max) {\n  return Math.random() * (max - min) + min;\n}\n","import { getUniforms, createProgram, compileShader } from \"./helpers\";\n\nfunction hashCode(s) {\n  if (s.length === 0) return 0;\n  let hash = 0;\n  for (let i = 0; i < s.length; i++) {\n    hash = (hash << 5) - hash + s.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n  return hash;\n}\n\nexport default class Material {\n  constructor(vertexShader, fragmentShaderSource, gl) {\n    this.vertexShader = vertexShader;\n    this.fragmentShaderSource = fragmentShaderSource;\n    this.programs = [];\n    this.activeProgram = null;\n    this.uniforms = [];\n    this.gl = gl;\n  }\n\n  setKeywords(keywords) {\n    let hash = 0;\n    for (let i = 0; i < keywords.length; i++) hash += hashCode(keywords[i]);\n    let program = this.programs[hash];\n    if (program == null) {\n      let fragmentShader = compileShader(\n        this.gl.FRAGMENT_SHADER,\n        this.fragmentShaderSource,\n        this.gl,\n        keywords\n      );\n      program = createProgram(this.vertexShader, fragmentShader, this.gl);\n      this.programs[hash] = program;\n    }\n\n    if (program === this.activeProgram) return;\n\n    this.uniforms = getUniforms(program, this.gl);\n    this.activeProgram = program;\n  }\n\n  bind() {\n    this.gl.useProgram(this.activeProgram);\n  }\n}\n","import { getUniforms, createProgram } from \"./helpers\";\n\nexport default class Program {\n  constructor(vertexShader, fragmentShader, gl) {\n    this.uniforms = {};\n    this.gl = gl;\n    this.program = createProgram(vertexShader, fragmentShader, this.gl);\n    this.uniforms = getUniforms(this.program, this.gl);\n  }\n\n  bind() {\n    this.gl.useProgram(this.program);\n  }\n}\n","/*\nMIT License\n\nCopyright (c) 2017 Pavel Dobryakov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nimport isMobile from \"../../../utils/isMobile\";\n\nimport Pointer from \"./Pointer\";\nimport Material from \"./Material\";\nimport Program from \"./Program\";\nimport {\n  normalizeColor,\n  HSVtoRGB,\n  easeInOutQuart,\n  getWebGLContext,\n  compileShader,\n  scaleByPixelRatio,\n  createTextureAsync,\n  getRandomValue,\n} from \"./helpers\";\nimport * as shaders from \"./shaders\";\n\nexport default class FluidSimulation {\n  constructor(canvas, config) {\n    const { gl, ext } = getWebGLContext(canvas);\n\n    this.el = canvas;\n    this.gl = gl;\n    this.ext = ext;\n    this.config = config;\n    this.paused = false;\n\n    this.pointers = [];\n    this.splatStack = [];\n\n    this.init();\n  }\n\n  init() {\n    const { gl, ext } = this;\n\n    this.pointers.push(new Pointer());\n\n    if (isMobile()) {\n      this.config.DYE_RESOLUTION = 512;\n    }\n\n    if (!ext.supportLinearFiltering) {\n      this.config.DYE_RESOLUTION = 512;\n      this.config.SHADING = false;\n      this.config.BLOOM = false;\n      this.config.SUNRAYS = false;\n    }\n\n    this.dye = null;\n    this.velocity = null;\n    this.divergence = null;\n    this.curl = null;\n    this.pressure = null;\n    let bloom;\n    let bloomFramebuffers = [];\n    let sunrays;\n    let sunraysTemp;\n\n    let colorUpdateTimer = 0.0;\n    let noiseUpdateTimer = 0.0;\n\n    let lastUpdate = 0.0;\n    let delta = 0.0;\n\n    let ditheringTexture = createTextureAsync(\"/LDR_LLL1_0.png\", this.gl);\n\n    // Compile shaders\n    const blurVertexShader = compileShader(\n      gl.VERTEX_SHADER,\n      shaders.blurVertexShaderSrc,\n      gl\n    );\n    const baseVertexShader = compileShader(\n      gl.VERTEX_SHADER,\n      shaders.baseVertexShaderSrc,\n      gl\n    );\n    const colorShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.colorShaderSrc,\n      gl\n    );\n    const copyShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.copyShaderSrc,\n      gl\n    );\n    const blurShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.blurShaderSrc,\n      gl\n    );\n    const clearShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.clearShaderSrc,\n      gl\n    );\n    const bloomPrefilterShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.bloomPrefilterShaderSrc,\n      gl\n    );\n    const bloomBlurShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.bloomBlurShaderSrc,\n      gl\n    );\n    const bloomFinalShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.bloomFinalShaderSrc,\n      gl\n    );\n    const sunraysMaskShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.sunraysMaskShaderSrc,\n      gl\n    );\n    const sunraysShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.sunraysShaderSrc,\n      gl\n    );\n    const splatShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.splatShaderSrc,\n      gl\n    );\n    // const starfieldShader = compileShader(\n    //   gl.FRAGMENT_SHADER,\n    //   shaders.starfieldShaderSrc,\n    //   gl\n    // );\n    const advectionShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.advectionShaderSrc,\n      gl,\n      ext.supportLinearFiltering ? null : [\"MANUAL_FILTERING\"]\n    );\n    const divergenceShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.divergenceShaderSrc,\n      gl\n    );\n    const curlShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.curlShaderSrc,\n      gl\n    );\n    const vorticityShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.vorticityShaderSrc,\n      gl\n    );\n    const pressureShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.pressureShaderSrc,\n      gl\n    );\n    const gradientSubtractShader = compileShader(\n      gl.FRAGMENT_SHADER,\n      shaders.gradientSubtractShaderSrc,\n      gl\n    );\n    const blurProgram = new Program(blurVertexShader, blurShader, gl);\n    const copyProgram = new Program(baseVertexShader, copyShader, gl);\n    const clearProgram = new Program(baseVertexShader, clearShader, gl);\n    const colorProgram = new Program(baseVertexShader, colorShader, gl);\n    const bloomPrefilterProgram = new Program(\n      baseVertexShader,\n      bloomPrefilterShader,\n      gl\n    );\n    const bloomBlurProgram = new Program(baseVertexShader, bloomBlurShader, gl);\n    const bloomFinalProgram = new Program(\n      baseVertexShader,\n      bloomFinalShader,\n      gl\n    );\n    const sunraysMaskProgram = new Program(\n      baseVertexShader,\n      sunraysMaskShader,\n      gl\n    );\n    const sunraysProgram = new Program(baseVertexShader, sunraysShader, gl);\n    const splatProgram = new Program(baseVertexShader, splatShader, gl);\n    // const starfieldProgram = new Program(baseVertexShader, starfieldShader, gl);\n    const advectionProgram = new Program(baseVertexShader, advectionShader, gl);\n    const divergenceProgram = new Program(\n      baseVertexShader,\n      divergenceShader,\n      gl\n    );\n    const curlProgram = new Program(baseVertexShader, curlShader, gl);\n    const vorticityProgram = new Program(baseVertexShader, vorticityShader, gl);\n    const pressureProgram = new Program(baseVertexShader, pressureShader, gl);\n    const gradienSubtractProgram = new Program(\n      baseVertexShader,\n      gradientSubtractShader,\n      gl\n    );\n    const displayMaterial = new Material(\n      baseVertexShader,\n      shaders.displayShaderSrc,\n      gl\n    );\n\n    // Update keywords\n    let displayKeywords = [];\n    if (this.config.SHADING) displayKeywords.push(\"SHADING\");\n    if (this.config.BLOOM) displayKeywords.push(\"BLOOM\");\n    if (this.config.SUNRAYS) displayKeywords.push(\"SUNRAYS\");\n\n    displayMaterial.setKeywords(displayKeywords);\n\n    const blit = (() => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n      gl.bufferData(\n        gl.ARRAY_BUFFER,\n        new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n        gl.STATIC_DRAW\n      );\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n      gl.bufferData(\n        gl.ELEMENT_ARRAY_BUFFER,\n        new Uint16Array([0, 1, 2, 0, 2, 3]),\n        gl.STATIC_DRAW\n      );\n      gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n      gl.enableVertexAttribArray(0);\n\n      return (target, clear = false) => {\n        if (target == null) {\n          gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        } else {\n          gl.viewport(0, 0, target.width, target.height);\n          gl.bindFramebuffer(gl.FRAMEBUFFER, target.fbo);\n        }\n        if (clear) {\n          gl.clearColor(0.0, 0.0, 0.0, 1.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n      };\n    })();\n\n    this.initBloomFramebuffers = () => {\n      let res = this.getResolution(this.config.BLOOM_RESOLUTION);\n\n      const texType = ext.halfFloatTexType;\n      const rgba = ext.formatRGBA;\n      const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n\n      bloom = this.createFBO(\n        res.width,\n        res.height,\n        rgba.internalFormat,\n        rgba.format,\n        texType,\n        filtering\n      );\n\n      bloomFramebuffers.length = 0;\n      for (let i = 0; i < this.config.BLOOM_ITERATIONS; i++) {\n        let width = res.width >> (i + 1);\n        let height = res.height >> (i + 1);\n\n        if (width < 2 || height < 2) break;\n\n        let fbo = this.createFBO(\n          width,\n          height,\n          rgba.internalFormat,\n          rgba.format,\n          texType,\n          filtering\n        );\n        bloomFramebuffers.push(fbo);\n      }\n    };\n\n    this.initSunraysFramebuffers = () => {\n      let res = this.getResolution(this.config.SUNRAYS_RESOLUTION);\n\n      const texType = ext.halfFloatTexType;\n      const r = ext.formatR;\n      const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\n\n      sunrays = this.createFBO(\n        res.width,\n        res.height,\n        r.internalFormat,\n        r.format,\n        texType,\n        filtering\n      );\n      sunraysTemp = this.createFBO(\n        res.width,\n        res.height,\n        r.internalFormat,\n        r.format,\n        texType,\n        filtering\n      );\n    };\n\n    this.createFBO = (w, h, internalFormat, format, type, param) => {\n      gl.activeTexture(gl.TEXTURE0);\n      let texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,\n        internalFormat,\n        w,\n        h,\n        0,\n        format,\n        type,\n        null\n      );\n\n      let fbo = gl.createFramebuffer();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0,\n        gl.TEXTURE_2D,\n        texture,\n        0\n      );\n      gl.viewport(0, 0, w, h);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      let texelSizeX = 1.0 / w;\n      let texelSizeY = 1.0 / h;\n\n      return {\n        texture,\n        fbo,\n        width: w,\n        height: h,\n        texelSizeX,\n        texelSizeY,\n        attach(id) {\n          gl.activeTexture(gl.TEXTURE0 + id);\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          return id;\n        },\n      };\n    };\n\n    this.createDoubleFBO = (w, h, internalFormat, format, type, param) => {\n      let fbo1 = this.createFBO(w, h, internalFormat, format, type, param);\n      let fbo2 = this.createFBO(w, h, internalFormat, format, type, param);\n\n      return {\n        width: w,\n        height: h,\n        texelSizeX: fbo1.texelSizeX,\n        texelSizeY: fbo1.texelSizeY,\n        get read() {\n          return fbo1;\n        },\n        set read(value) {\n          fbo1 = value;\n        },\n        get write() {\n          return fbo2;\n        },\n        set write(value) {\n          fbo2 = value;\n        },\n        swap() {\n          let temp = fbo1;\n          fbo1 = fbo2;\n          fbo2 = temp;\n        },\n      };\n    };\n\n    const resizeFBO = (target, w, h, internalFormat, format, type, param) => {\n      let newFBO = this.createFBO(w, h, internalFormat, format, type, param);\n      copyProgram.bind();\n      gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));\n      blit(newFBO);\n      return newFBO;\n    };\n\n    this.resizeDoubleFBO = (\n      target,\n      w,\n      h,\n      internalFormat,\n      format,\n      type,\n      param\n    ) => {\n      if (target.width === w && target.height === h) return target;\n      target.read = resizeFBO(\n        target.read,\n        w,\n        h,\n        internalFormat,\n        format,\n        type,\n        param\n      );\n      target.write = this.createFBO(w, h, internalFormat, format, type, param);\n      target.width = w;\n      target.height = h;\n      target.texelSizeX = 1.0 / w;\n      target.texelSizeY = 1.0 / h;\n      return target;\n    };\n\n    const update = (timestamp) => {\n      if (!this.paused) {\n        calcDeltaTime(timestamp);\n\n        noiseUpdateTimer += delta / 1000;\n\n        applyInputs();\n\n        updateColors(delta);\n\n        step(delta);\n\n        if (noiseUpdateTimer < 0.002) walker(noiseUpdateTimer);\n\n        render(null);\n      }\n\n      requestAnimationFrame(update);\n    };\n\n    const calcDeltaTime = (timestamp) => {\n      delta = (timestamp - lastUpdate) / 1000;\n      delta = Math.min(delta, 0.016666);\n      lastUpdate = timestamp;\n      return delta;\n    };\n\n    const updateColors = (dt) => {\n      colorUpdateTimer += dt * this.config.COLOR_UPDATE_SPEED;\n\n      // if (colorUpdateTimer >= 1) {\n      // colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\n\n      this.pointers.forEach((p) => {\n        p.color = this.generateColor(colorUpdateTimer);\n      });\n      // }\n    };\n\n    const applyInputs = () => {\n      this.pointers.forEach((p) => {\n        if (p.moved) {\n          p.moved = false;\n          splatPointer(p);\n        }\n      });\n    };\n\n    const step = (dt) => {\n      gl.disable(gl.BLEND);\n\n      curlProgram.bind();\n      gl.uniform2f(\n        curlProgram.uniforms.texelSize,\n        this.velocity.texelSizeX,\n        this.velocity.texelSizeY\n      );\n      gl.uniform1i(\n        curlProgram.uniforms.uVelocity,\n        this.velocity.read.attach(0)\n      );\n      blit(this.curl);\n\n      vorticityProgram.bind();\n      gl.uniform2f(\n        vorticityProgram.uniforms.texelSize,\n        this.velocity.texelSizeX,\n        this.velocity.texelSizeY\n      );\n      gl.uniform1i(\n        vorticityProgram.uniforms.uVelocity,\n        this.velocity.read.attach(0)\n      );\n      gl.uniform1i(vorticityProgram.uniforms.uCurl, this.curl.attach(1));\n      gl.uniform1f(vorticityProgram.uniforms.curl, this.config.CURL);\n      gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n      blit(this.velocity.write);\n      this.velocity.swap();\n\n      divergenceProgram.bind();\n      gl.uniform2f(\n        divergenceProgram.uniforms.texelSize,\n        this.velocity.texelSizeX,\n        this.velocity.texelSizeY\n      );\n      gl.uniform1i(\n        divergenceProgram.uniforms.uVelocity,\n        this.velocity.read.attach(0)\n      );\n      blit(this.divergence);\n\n      clearProgram.bind();\n      gl.uniform1i(\n        clearProgram.uniforms.uTexture,\n        this.pressure.read.attach(0)\n      );\n      gl.uniform1f(clearProgram.uniforms.value, this.config.PRESSURE);\n      blit(this.pressure.write);\n      this.pressure.swap();\n\n      pressureProgram.bind();\n      gl.uniform2f(\n        pressureProgram.uniforms.texelSize,\n        this.velocity.texelSizeX,\n        this.velocity.texelSizeY\n      );\n      gl.uniform1i(\n        pressureProgram.uniforms.uDivergence,\n        this.divergence.attach(0)\n      );\n      for (let i = 0; i < this.config.PRESSURE_ITERATIONS; i++) {\n        gl.uniform1i(\n          pressureProgram.uniforms.uPressure,\n          this.pressure.read.attach(1)\n        );\n        blit(this.pressure.write);\n        this.pressure.swap();\n      }\n\n      gradienSubtractProgram.bind();\n      gl.uniform2f(\n        gradienSubtractProgram.uniforms.texelSize,\n        this.velocity.texelSizeX,\n        this.velocity.texelSizeY\n      );\n      gl.uniform1i(\n        gradienSubtractProgram.uniforms.uPressure,\n        this.pressure.read.attach(0)\n      );\n      gl.uniform1i(\n        gradienSubtractProgram.uniforms.uVelocity,\n        this.velocity.read.attach(1)\n      );\n      blit(this.velocity.write);\n      this.velocity.swap();\n\n      advectionProgram.bind();\n      gl.uniform2f(\n        advectionProgram.uniforms.texelSize,\n        this.velocity.texelSizeX,\n        this.velocity.texelSizeY\n      );\n      if (!ext.supportLinearFiltering)\n        gl.uniform2f(\n          advectionProgram.uniforms.dyeTexelSize,\n          this.velocity.texelSizeX,\n          this.velocity.texelSizeY\n        );\n\n      let velocityId = this.velocity.read.attach(0);\n      gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\n      gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\n      gl.uniform1f(advectionProgram.uniforms.dt, dt);\n      gl.uniform1f(\n        advectionProgram.uniforms.dissipation,\n        this.config.VELOCITY_DISSIPATION\n      );\n\n      blit(this.velocity.write);\n      this.velocity.swap();\n\n      if (!ext.supportLinearFiltering)\n        gl.uniform2f(\n          advectionProgram.uniforms.dyeTexelSize,\n          this.dye.texelSizeX,\n          this.dye.texelSizeY\n        );\n      gl.uniform1i(\n        advectionProgram.uniforms.uVelocity,\n        this.velocity.read.attach(0)\n      );\n      gl.uniform1i(advectionProgram.uniforms.uSource, this.dye.read.attach(1));\n      gl.uniform1f(\n        advectionProgram.uniforms.dissipation,\n        this.config.DENSITY_DISSIPATION\n      );\n\n      blit(this.dye.write);\n\n      this.dye.swap();\n    };\n\n    const render = (target) => {\n      if (this.config.BLOOM) applyBloom(this.dye.read, bloom);\n      if (this.config.SUNRAYS) {\n        applySunrays(this.dye.read, this.dye.write, sunrays);\n        blur(sunrays, sunraysTemp, 1);\n      }\n\n      if (target == null || !this.config.TRANSPARENT) {\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n\n      if (!this.config.TRANSPARENT)\n        drawColor(target, normalizeColor(this.config.BACK_COLOR));\n      // if (target == null && this.config.TRANSPARENT) drawCheckerboard(target);\n\n      drawDisplay(target);\n    };\n\n    const drawColor = (target, color) => {\n      colorProgram.bind();\n      gl.uniform4f(\n        colorProgram.uniforms.color,\n        color.r,\n        color.g,\n        color.b,\n        color.a\n      );\n\n      // starfieldProgram.bind();\n      // gl.uniform1f(starfieldProgram.uniforms.dt, noiseUpdateTimer * 200);\n      // gl.uniform2f(\n      //   starfieldProgram.uniforms.res,\n      //   gl.drawingBufferWidth,\n      //   gl.drawingBufferHeight\n      // );\n\n      blit(target);\n    };\n\n    const drawDisplay = (target) => {\n      let width = target == null ? gl.drawingBufferWidth : target.width;\n      let height = target == null ? gl.drawingBufferHeight : target.height;\n\n      displayMaterial.bind();\n\n      gl.uniform1f(displayMaterial.uniforms.dt, noiseUpdateTimer);\n\n      if (this.config.SHADING)\n        gl.uniform2f(\n          displayMaterial.uniforms.texelSize,\n          1.0 / width,\n          1.0 / height\n        );\n      gl.uniform1i(displayMaterial.uniforms.uTexture, this.dye.read.attach(0));\n      if (this.config.BLOOM) {\n        gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1));\n        gl.uniform1i(\n          displayMaterial.uniforms.uDithering,\n          ditheringTexture.attach(2)\n        );\n        let scale = getTextureScale(ditheringTexture, width, height);\n        gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\n      }\n      if (this.config.SUNRAYS)\n        gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3));\n\n      blit(target);\n    };\n\n    const applyBloom = (source, destination) => {\n      if (bloomFramebuffers.length < 2) return;\n\n      let last = destination;\n\n      gl.disable(gl.BLEND);\n      bloomPrefilterProgram.bind();\n      let knee =\n        this.config.BLOOM_THRESHOLD * this.config.BLOOM_SOFT_KNEE + 0.0001;\n      let curve0 = this.config.BLOOM_THRESHOLD - knee;\n      let curve1 = knee * 2;\n      let curve2 = 0.25 / knee;\n      gl.uniform3f(\n        bloomPrefilterProgram.uniforms.curve,\n        curve0,\n        curve1,\n        curve2\n      );\n      gl.uniform1f(\n        bloomPrefilterProgram.uniforms.threshold,\n        this.config.BLOOM_THRESHOLD\n      );\n      gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0));\n      blit(last);\n\n      bloomBlurProgram.bind();\n      for (let i = 0; i < bloomFramebuffers.length; i++) {\n        let dest = bloomFramebuffers[i];\n        gl.uniform2f(\n          bloomBlurProgram.uniforms.texelSize,\n          last.texelSizeX,\n          last.texelSizeY\n        );\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\n        blit(dest);\n        last = dest;\n      }\n\n      gl.blendFunc(gl.ONE, gl.ONE);\n      gl.enable(gl.BLEND);\n\n      for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\n        let baseTex = bloomFramebuffers[i];\n        gl.uniform2f(\n          bloomBlurProgram.uniforms.texelSize,\n          last.texelSizeX,\n          last.texelSizeY\n        );\n        gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\n        gl.viewport(0, 0, baseTex.width, baseTex.height);\n        blit(baseTex);\n        last = baseTex;\n      }\n\n      gl.disable(gl.BLEND);\n      bloomFinalProgram.bind();\n      gl.uniform2f(\n        bloomFinalProgram.uniforms.texelSize,\n        last.texelSizeX,\n        last.texelSizeY\n      );\n      gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0));\n      gl.uniform1f(\n        bloomFinalProgram.uniforms.intensity,\n        this.config.BLOOM_INTENSITY\n      );\n      blit(destination);\n    };\n\n    const applySunrays = (source, mask, destination) => {\n      gl.disable(gl.BLEND);\n      sunraysMaskProgram.bind();\n      gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source.attach(0));\n      blit(mask);\n\n      sunraysProgram.bind();\n      gl.uniform1f(sunraysProgram.uniforms.weight, this.config.SUNRAYS_WEIGHT);\n      gl.uniform1i(sunraysProgram.uniforms.uTexture, mask.attach(0));\n      blit(destination);\n    };\n\n    const blur = (target, temp, iterations) => {\n      blurProgram.bind();\n      for (let i = 0; i < iterations; i++) {\n        gl.uniform2f(blurProgram.uniforms.texelSize, target.texelSizeX, 0.0);\n        gl.uniform1i(blurProgram.uniforms.uTexture, target.attach(0));\n        blit(temp);\n\n        gl.uniform2f(blurProgram.uniforms.texelSize, 0.0, target.texelSizeY);\n        gl.uniform1i(blurProgram.uniforms.uTexture, temp.attach(0));\n        blit(target);\n      }\n    };\n\n    const splatPointer = (pointer) => {\n      let dx = pointer.deltaX * this.config.SPLAT_FORCE;\n      let dy = pointer.deltaY * this.config.SPLAT_FORCE;\n      splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\n    };\n\n    const splat = (x, y, dx, dy, color, radius = this.config.SPLAT_RADIUS) => {\n      splatProgram.bind();\n      gl.uniform1i(splatProgram.uniforms.uTarget, this.velocity.read.attach(0));\n      gl.uniform1f(\n        splatProgram.uniforms.aspectRatio,\n        this.el.width / this.el.height\n      );\n      gl.uniform2f(splatProgram.uniforms.point, x, y);\n      gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0.0);\n      gl.uniform1f(splatProgram.uniforms.radius, correctRadius(radius / 100.0));\n      blit(this.velocity.write);\n      this.velocity.swap();\n\n      gl.uniform1i(splatProgram.uniforms.uTarget, this.dye.read.attach(0));\n      gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\n      blit(this.dye.write);\n      this.dye.swap();\n    };\n\n    const correctRadius = (radius) => {\n      let aspectRatio = this.el.width / this.el.height;\n      if (aspectRatio > 1) radius *= aspectRatio;\n      return radius;\n    };\n\n    const getTextureScale = (texture, width, height) => {\n      return {\n        x: width / texture.width,\n        y: height / texture.height,\n      };\n    };\n\n    this.resizeCanvas();\n\n    this.initFramebuffers();\n\n    const color = this.generateColor(getRandomValue(0, 10));\n    const dx = 20;\n    const dy = 20;\n    const r = getRandomValue(0.5, 1);\n\n    const walker = (delta) => {\n      for (let index = 0; index < 3; index++) {\n        splat(\n          (Math.sin(delta * 0.8 * 3000) + delta * 300) * r,\n          Math.sin(delta * 0.3 * 2000) * r,\n          dx,\n          dy,\n          color,\n          this.config.SPLAT_RADIUS\n        );\n      }\n    };\n\n    requestAnimationFrame(update);\n\n    // Offset listeners callback to avoid weird bug on immediate input\n    this.inputListenersTimeout = window.setTimeout(() => {\n      this.el.addEventListener(\"mousemove\", this.onMouseMove);\n    }, 1000);\n\n    window.addEventListener(\"resize\", this.onResize);\n  }\n\n  getResolution(resolution) {\n    let aspectRatio = this.gl.drawingBufferWidth / this.gl.drawingBufferHeight;\n    if (aspectRatio < 1) aspectRatio = 1.0 / aspectRatio;\n\n    let min = Math.round(resolution);\n    let max = Math.round(resolution * aspectRatio);\n\n    if (this.gl.drawingBufferWidth > this.gl.drawingBufferHeight)\n      return { width: max, height: min };\n    else return { width: min, height: max };\n  }\n\n  initFramebuffers() {\n    let simRes = this.getResolution(this.config.SIM_RESOLUTION);\n    let dyeRes = this.getResolution(this.config.DYE_RESOLUTION);\n\n    const texType = this.ext.halfFloatTexType;\n    const rgba = this.ext.formatRGBA;\n    const rg = this.ext.formatRG;\n    const r = this.ext.formatR;\n    const filtering = this.ext.supportLinearFiltering\n      ? this.gl.LINEAR\n      : this.gl.NEAREST;\n\n    this.gl.disable(this.gl.BLEND);\n\n    if (this.dye == null)\n      this.dye = this.createDoubleFBO(\n        dyeRes.width,\n        dyeRes.height,\n        rgba.internalFormat,\n        rgba.format,\n        texType,\n        filtering\n      );\n    else\n      this.dye = this.resizeDoubleFBO(\n        this.dye,\n        dyeRes.width,\n        dyeRes.height,\n        rgba.internalFormat,\n        rgba.format,\n        texType,\n        filtering\n      );\n\n    if (this.velocity == null)\n      this.velocity = this.createDoubleFBO(\n        simRes.width,\n        simRes.height,\n        rg.internalFormat,\n        rg.format,\n        texType,\n        filtering\n      );\n    else\n      this.velocity = this.resizeDoubleFBO(\n        this.velocity,\n        simRes.width,\n        simRes.height,\n        rg.internalFormat,\n        rg.format,\n        texType,\n        filtering\n      );\n\n    this.divergence = this.createFBO(\n      simRes.width,\n      simRes.height,\n      r.internalFormat,\n      r.format,\n      texType,\n      this.gl.NEAREST\n    );\n    this.curl = this.createFBO(\n      simRes.width,\n      simRes.height,\n      r.internalFormat,\n      r.format,\n      texType,\n      this.gl.NEAREST\n    );\n    this.pressure = this.createDoubleFBO(\n      simRes.width,\n      simRes.height,\n      r.internalFormat,\n      r.format,\n      texType,\n      this.gl.NEAREST\n    );\n    this.initBloomFramebuffers();\n    this.initSunraysFramebuffers();\n  }\n\n  resizeCanvas() {\n    let width = scaleByPixelRatio(this.el.clientWidth);\n    let height = scaleByPixelRatio(this.el.clientHeight);\n\n    if (this.el.width !== width || this.el.height !== height) {\n      this.el.width = width;\n      this.el.height = height;\n      return true;\n    }\n    return false;\n  }\n\n  generateColor(delta) {\n    const cos = (Math.sin(delta) + 1) / 2;\n    const easing = easeInOutQuart(cos);\n    const h = easing * (330 - 230) + 230;\n    const s = easing * (1 - 0.66) + 0.66;\n    const v = easing * (0.3 - 0.8) + 0.8;\n\n    let c = HSVtoRGB(h / 360, s, v);\n\n    c.r *= 0.15;\n    c.g *= 0.15;\n    c.b *= 0.15;\n\n    return c;\n  }\n\n  updatePointerDownData(pointer, id, posX, posY) {\n    pointer.id = id;\n    pointer.down = true;\n    pointer.moved = false;\n    pointer.texcoordX = posX / this.el.width;\n    pointer.texcoordY = 1.0 - posY / this.el.height;\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.deltaX = 0;\n    pointer.deltaY = 0;\n    // pointer.color = this.generateColor(colorUpdateTimer);\n  }\n\n  updatePointerUpData(pointer) {\n    pointer.down = false;\n  }\n\n  updatePointerMoveData(pointer, posX, posY) {\n    pointer.prevTexcoordX = pointer.texcoordX;\n    pointer.prevTexcoordY = pointer.texcoordY;\n    pointer.texcoordX = posX / this.el.width;\n    pointer.texcoordY = 1.0 - posY / this.el.height;\n    // Fix a bug on Safari that triggers mouseMove 2 times\n    const newDeltaX = this.correctDeltaX(\n      pointer.texcoordX - pointer.prevTexcoordX\n    );\n    const newDeltaY = this.correctDeltaY(\n      pointer.texcoordY - pointer.prevTexcoordY\n    );\n    pointer.deltaX = newDeltaX !== 0 ? newDeltaX : pointer.deltaX;\n    pointer.deltaY = newDeltaY !== 0 ? newDeltaY : pointer.deltaY;\n\n    pointer.moved =\n      Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\n  }\n\n  correctDeltaX(delta) {\n    let aspectRatio = this.el.width / this.el.height;\n    if (aspectRatio < 1) delta *= aspectRatio;\n    return delta;\n  }\n\n  correctDeltaY(delta) {\n    let aspectRatio = this.el.width / this.el.height;\n    if (aspectRatio > 1) delta /= aspectRatio;\n    return delta;\n  }\n\n  onMouseMove = (e) => {\n    let posX = scaleByPixelRatio(e.offsetX);\n    let posY = scaleByPixelRatio(e.offsetY);\n    let pointer = this.pointers.find((p) => p.id === -1);\n    if (pointer == null) pointer = new Pointer();\n    this.updatePointerMoveData(pointer, posX, posY);\n  };\n\n  onResize = (e) => {\n    if (this.resizeCanvas()) this.initFramebuffers();\n  };\n\n  pause() {\n    this.paused = true;\n  }\n\n  play() {\n    this.paused = false;\n  }\n\n  dismount() {\n    if (this.inputListenersTimeout) {\n      this.el.removeEventListener(\"mousemove\", this.onMouseMove);\n    } else {\n      clearTimeout(this.inputListenersTimeout);\n    }\n\n    window.addEventListener(\"resize\", this.onResize);\n  }\n}\n","export default function isMobile() {\n  return /Mobi|Android/i.test(navigator.userAgent);\n}\n","export const baseVertexShaderSrc = `\n  precision highp float;\n\n  attribute vec2 aPosition;\n  varying vec2 vUv;\n  varying vec2 vL;\n  varying vec2 vR;\n  varying vec2 vT;\n  varying vec2 vB;\n  uniform vec2 texelSize;\n\n  void main () {\n      vUv = aPosition * 0.5 + 0.5;\n      vL = vUv - vec2(texelSize.x, 0.0);\n      vR = vUv + vec2(texelSize.x, 0.0);\n      vT = vUv + vec2(0.0, texelSize.y);\n      vB = vUv - vec2(0.0, texelSize.y);\n      gl_Position = vec4(aPosition, 0.0, 1.0);\n  }\n`;\n\nexport const blurVertexShaderSrc = `\n  precision highp float;\n\n  attribute vec2 aPosition;\n  varying vec2 vUv;\n  varying vec2 vL;\n  varying vec2 vR;\n  uniform vec2 texelSize;\n\n  void main () {\n      vUv = aPosition * 0.5 + 0.5;\n      float offset = 1.33333333;\n      vL = vUv - texelSize * offset;\n      vR = vUv + texelSize * offset;\n      gl_Position = vec4(aPosition, 0.0, 1.0);\n  }\n`;\n\nexport const blurShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n        sum += texture2D(uTexture, vL) * 0.35294117;\n        sum += texture2D(uTexture, vR) * 0.35294117;\n        gl_FragColor = sum;\n    }\n`;\n\nexport const copyShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n`;\n\nexport const clearShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n`;\n\nexport const colorShaderSrc = `\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n`;\n\nexport const displayShaderSrc = `\n    precision highp float;\n    precision highp sampler2D;\n\n    //varying highp vec2 vUv;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n    uniform float dt;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    float random (vec2 p) {\n        vec2 K1 = vec2(\n          23.14069263277926, // e^pi (Gelfond's constant)\n          2.665144142690225  // 2^sqrt(2) (Gelfondâ€“Schneider constant)\n        );\n        return fract(cos(dot(p,K1)) * 12345.6789);\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        vec2 uvRandom = vUv;\n\n        uvRandom.y *= random(vec2(uvRandom.y, dt));\n        float noise2 = max(0.4, random(uvRandom));\n        c *= noise2;\n\n        float a = max(c.r, max(c.g, c.b));\n\n        gl_FragColor = vec4(c, a);\n    }\n`;\n\nexport const bloomPrefilterShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n`;\n\nexport const bloomBlurShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n`;\n\nexport const bloomFinalShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n`;\n\nexport const sunraysMaskShaderSrc = `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 c = texture2D(uTexture, vUv);\n        float br = max(c.r, max(c.g, c.b));\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n        gl_FragColor = c;\n    }\n`;\n\nexport const sunraysShaderSrc = `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float weight;\n\n    #define ITERATIONS 16\n\n    void main () {\n        float Density = 0.3;\n        float Decay = 0.95;\n        float Exposure = 0.7;\n\n        vec2 coord = vUv;\n        vec2 dir = vUv - 0.5;\n\n        dir *= 1.0 / float(ITERATIONS) * Density;\n        float illuminationDecay = 1.0;\n\n        float color = texture2D(uTexture, vUv).a;\n\n        for (int i = 0; i < ITERATIONS; i++)\n        {\n            coord -= dir;\n            float col = texture2D(uTexture, coord).a;\n            color += col * illuminationDecay * weight;\n            illuminationDecay *= Decay;\n        }\n\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n    }\n`;\n\nexport const splatShaderSrc = `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n`;\n\nexport const advectionShaderSrc = `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n    #ifdef MANUAL_FILTERING\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\n    #else\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        vec4 result = texture2D(uSource, coord);\n    #endif\n        float decay = 1.0 + dissipation * dt;\n        gl_FragColor = result / decay;\n    }`;\n\nexport const divergenceShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        // viewport bounce effect\n        //if (vL.x < 0.0) { L = -C.x; }\n        //if (vR.x > 1.0) { R = -C.x; }\n        //if (vT.y > 1.0) { T = -C.y; }\n        //if (vB.y < 0.0) { B = -C.y; }\n\n//        float div = 0.5 * (R - L + T - B);\n        float div = 0.2 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 0.0);\n    }\n`;\n\nexport const curlShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n`;\n\nexport const vorticityShaderSrc = `\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity += force * dt;\n        velocity = min(max(velocity, -1000.0), 1000.0);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n`;\n\nexport const pressureShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.23;\n        //float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n`;\n\nexport const gradientSubtractShaderSrc = `\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n`;\n"],"sourceRoot":""}