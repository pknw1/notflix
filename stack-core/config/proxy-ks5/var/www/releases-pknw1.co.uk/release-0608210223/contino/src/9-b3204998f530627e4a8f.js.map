{"version":3,"sources":["webpack:///../node_modules/splitting/dist/splitting-lite.js"],"names":["module","exports","root","document","createText","createTextNode","bind","setProperty","el","varName","value","style","appendChild","child","createElement","parent","key","text","whitespace","className","setAttribute","textContent","$","e","length","nodeName","slice","call","querySelectorAll","each","items","fn","some","plugins","createPlugin","by","depends","split","resolve","resolvePlugins","deps","index","indexOf","unshift","p","indexOfParent","splice","map","obj","add","opts","splitText","splitOn","includePrevious","preserveWhitespace","normalize","elements","F","createDocumentFragment","push","previousSibling","allElements","childNodes","next","tagName","hasChildNodes","apply","wholeText","contents","trim","i","splitEl","innerHTML","wordPlugin","charPlugin","options","ctx","results","word","Splitting","target","force","getAttribute","getData","opts2","dest","src","k","copy","plugin","pluginBy","key2","element","prefix","cssVar","Array","isArray","item","classList","html","content","outerHTML","factory"],"mappings":"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","file":"9-b3204998f530627e4a8f.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Splitting = factory();\n})(this, function () {\n  'use strict';\n\n  var root = document;\n  var createText = root.createTextNode.bind(root);\n  /**\n   * # setProperty\n   * Apply a CSS var\n   * @param el{HTMLElement} \n   * @param varName {string} \n   * @param value {string|number}  \n   */\n\n  function setProperty(el, varName, value) {\n    el.style.setProperty(varName, value);\n  }\n  /**\n   * \n   * @param {Node} el \n   * @param {Node} child \n   */\n\n\n  function appendChild(el, child) {\n    return el.appendChild(child);\n  }\n\n  function createElement(parent, key, text, whitespace) {\n    var el = root.createElement('span');\n    key && (el.className = key);\n\n    if (text) {\n      !whitespace && el.setAttribute(\"data-\" + key, text);\n      el.textContent = text;\n    }\n\n    return parent && appendChild(parent, el) || el;\n  }\n\n  function getData(el, key) {\n    return el.getAttribute(\"data-\" + key);\n  }\n  /**\n   * \n   * @param e {import('../types').Target} \n   * @param parent {HTMLElement}\n   * @returns {HTMLElement[]}\n   */\n\n\n  function $(e, parent) {\n    return !e || e.length == 0 ? // null or empty string returns empty array\n    [] : e.nodeName ? // a single element is wrapped in an array\n    [e] : // selector and NodeList are converted to Element[]\n    [].slice.call(e[0].nodeName ? e : (parent || root).querySelectorAll(e));\n  }\n  /**\n   * Creates and fills an array with the value provided\n   * @template {T}\n   * @param {number} len\n   * @param {() => T} valueProvider\n   * @return {T}\n   */\n\n\n  function each(items, fn) {\n    items && items.some(fn);\n  }\n\n  function selectFrom(obj) {\n    return function (key) {\n      return obj[key];\n    };\n  }\n  /**\n   * # Splitting.index\n   * Index split elements and add them to a Splitting instance.\n   *\n   * @param element {HTMLElement}\n   * @param key {string}\n   * @param items {HTMLElement[] | HTMLElement[][]}\n   */\n\n\n  function index(element, key, items) {\n    var prefix = '--' + key;\n    var cssVar = prefix + \"-index\";\n    each(items, function (items, i) {\n      if (Array.isArray(items)) {\n        each(items, function (item) {\n          setProperty(item, cssVar, i);\n        });\n      } else {\n        setProperty(items, cssVar, i);\n      }\n    });\n    setProperty(element, prefix + \"-total\", items.length);\n  }\n  /**\n   * @type {Record<string, import('./types').ISplittingPlugin>}\n   */\n\n\n  var plugins = {};\n  /**\n   * @param by {string}\n   * @param parent {string}\n   * @param deps {string[]}\n   * @return {string[]}\n   */\n\n  function resolvePlugins(by, parent, deps) {\n    // skip if already visited this dependency\n    var index = deps.indexOf(by);\n\n    if (index == -1) {\n      // if new to dependency array, add to the beginning\n      deps.unshift(by); // recursively call this function for all dependencies\n\n      each(plugins[by].depends, function (p) {\n        resolvePlugins(p, by, deps);\n      });\n    } else {\n      // if this dependency was added already move to the left of\n      // the parent dependency so it gets loaded in order\n      var indexOfParent = deps.indexOf(parent);\n      deps.splice(index, 1);\n      deps.splice(indexOfParent, 0, by);\n    }\n\n    return deps;\n  }\n  /**\n   * Internal utility for creating plugins... essentially to reduce\n   * the size of the library\n   * @param {string} by \n   * @param {string} key \n   * @param {string[]} depends \n   * @param {Function} split \n   * @returns {import('./types').ISplittingPlugin}\n   */\n\n\n  function createPlugin(by, depends, key, split) {\n    return {\n      by: by,\n      depends: depends,\n      key: key,\n      split: split\n    };\n  }\n  /**\n   *\n   * @param by {string}\n   * @returns {import('./types').ISplittingPlugin[]}\n   */\n\n\n  function resolve(by) {\n    return resolvePlugins(by, 0, []).map(selectFrom(plugins));\n  }\n  /**\n   * Adds a new plugin to splitting\n   * @param opts {import('./types').ISplittingPlugin}\n   */\n\n\n  function add(opts) {\n    plugins[opts.by] = opts;\n  }\n  /**\n   * # Splitting.split\n   * Split an element's textContent into individual elements\n   * @param el {Node} Element to split\n   * @param key {string}\n   * @param splitOn {string}\n   * @param includeSpace {boolean}\n   * @returns {HTMLElement[]}\n   */\n\n\n  function splitText(el, key, splitOn, includePrevious, preserveWhitespace) {\n    // Combine any strange text nodes or empty whitespace.\n    el.normalize(); // Use fragment to prevent unnecessary DOM thrashing.\n\n    var elements = [];\n    var F = document.createDocumentFragment();\n\n    if (includePrevious) {\n      elements.push(el.previousSibling);\n    }\n\n    var allElements = [];\n    $(el.childNodes).some(function (next) {\n      if (next.tagName && !next.hasChildNodes()) {\n        // keep elements without child nodes (no text and no children)\n        allElements.push(next);\n        return;\n      } // Recursively run through child nodes\n\n\n      if (next.childNodes && next.childNodes.length) {\n        allElements.push(next);\n        elements.push.apply(elements, splitText(next, key, splitOn, includePrevious, preserveWhitespace));\n        return;\n      } // Get the text to split, trimming out the whitespace\n\n      /** @type {string} */\n\n\n      var wholeText = next.wholeText || '';\n      var contents = wholeText.trim(); // If there's no text left after trimming whitespace, continue the loop\n\n      if (contents.length) {\n        // insert leading space if there was one\n        if (wholeText[0] === ' ') {\n          allElements.push(createText(' '));\n        } // Concatenate the split text children back into the full array\n\n\n        each(contents.split(splitOn), function (splitText, i) {\n          if (i && preserveWhitespace) {\n            allElements.push(createElement(F, \"whitespace\", \" \", preserveWhitespace));\n          }\n\n          var splitEl = createElement(F, key, splitText);\n          elements.push(splitEl);\n          allElements.push(splitEl);\n        }); // insert trailing space if there was one\n\n        if (wholeText[wholeText.length - 1] === ' ') {\n          allElements.push(createText(' '));\n        }\n      }\n    });\n    each(allElements, function (el) {\n      appendChild(F, el);\n    }); // Clear out the existing element\n\n    el.innerHTML = \"\";\n    appendChild(el, F);\n    return elements;\n  }\n  /** an empty value */\n\n\n  var _ = 0;\n\n  function copy(dest, src) {\n    for (var k in src) {\n      dest[k] = src[k];\n    }\n\n    return dest;\n  }\n\n  var WORDS = 'words';\n  var wordPlugin = createPlugin(\n  /*by: */\n  WORDS,\n  /*depends: */\n  _,\n  /*key: */\n  'word',\n  /*split: */\n  function (el) {\n    return splitText(el, 'word', /\\s+/, 0, 1);\n  });\n  var CHARS = \"chars\";\n  var charPlugin = createPlugin(\n  /*by: */\n  CHARS,\n  /*depends: */\n  [WORDS],\n  /*key: */\n  \"char\",\n  /*split: */\n  function (el, options, ctx) {\n    var results = [];\n    each(ctx[WORDS], function (word, i) {\n      results.push.apply(results, splitText(word, \"char\", \"\", options.whitespace && i));\n    });\n    return results;\n  });\n  /**\n   * # Splitting\n   * \n   * @param opts {import('./types').ISplittingOptions} \n   */\n\n  function Splitting(opts) {\n    opts = opts || {};\n    var key = opts.key;\n    return $(opts.target || '[data-splitting]').map(function (el) {\n      var ctx = el['🍌'];\n\n      if (!opts.force && ctx) {\n        return ctx;\n      }\n\n      ctx = el['🍌'] = {\n        el: el\n      };\n      var items = resolve(opts.by || getData(el, 'splitting') || CHARS);\n      var opts2 = copy({}, opts);\n      each(items, function (plugin) {\n        if (plugin.split) {\n          var pluginBy = plugin.by;\n          var key2 = (key ? '-' + key : '') + plugin.key;\n          var results = plugin.split(el, opts2, ctx);\n          key2 && index(el, key2, results);\n          ctx[pluginBy] = results;\n          el.classList.add(pluginBy);\n        }\n      });\n      el.classList.add('splitting');\n      return ctx;\n    });\n  }\n  /**\n   * # Splitting.html\n   * \n   * @param opts {import('./types').ISplittingOptions}\n   */\n\n\n  function html(opts) {\n    opts = opts || {};\n    var parent = opts.target = createElement();\n    parent.innerHTML = opts.content;\n    Splitting(opts);\n    return parent.outerHTML;\n  }\n\n  Splitting.html = html;\n  Splitting.add = add; // import { linePlugin } from \"./plugins/lines\";\n  // import { itemPlugin } from \"./plugins/items\";\n  // import { rowPlugin } from \"./plugins/rows\";\n  // import { columnPlugin } from \"./plugins/columns\";\n  // import { gridPlugin } from \"./plugins/grid\";\n  // import { layoutPlugin } from \"./plugins/layout\";\n  // import { cellRowPlugin } from \"./plugins/cellRows\";\n  // import { cellColumnPlugin } from \"./plugins/cellColumns\";\n  // import { cellPlugin } from \"./plugins/cells\";\n  // install plugins\n  // word/char plugins\n\n  add(wordPlugin);\n  add(charPlugin);\n  return Splitting;\n});"],"sourceRoot":""}